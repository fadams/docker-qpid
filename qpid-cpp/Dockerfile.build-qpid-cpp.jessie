#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

FROM debian:jessie-slim

# Prevent debconf warnings such as the following
# debconf: unable to initialize frontend: Dialog
# debconf: (TERM is not set, so the dialog frontend is not usable.)
# debconf: falling back to frontend: Readline
# See https://github.com/jessfraz/dockerfiles/issues/12
ENV DEBIAN_FRONTEND=noninteractive

WORKDIR /usr/src

COPY LICENSE .
COPY build.sh .

RUN \
    echo Installing package dependencies && \

    apt-get update && \

    # Add the packages used to build qpid-cpp
    apt-get install -y --no-install-recommends \
    apt-utils patch pkg-config perl libperl-dev python python-dev ruby ruby-dev \
    ca-certificates swig curl git cmake make uuid-dev \
    libsasl2-dev libsasl2-modules sasl2-bin libnspr4-dev libnss3-dev libdb++-dev \  
    librdmacm-dev libaio-dev libxerces-c-dev libxqilla-dev \

    ############################################################################
    # On Debian jessie the default compiler is gcc 4.9 and boost 1.55 and whilst
    # the latest versions of Qpid compile fine with those, earlier versions only
    # reliably compile with versions as high as gcc 4.7.2 and boost 1.49.0.
    # In order to use jessie to build all Qpid versions we compile those from
    # source as they aren't present in the repository, this can take a while.
    ############################################################################

    # The following packages and tweaks are needed to compile gcc 4.7.2
    gcc libmpfr-dev libmpc-dev libbz2-dev zlib1g-dev && \
    ln -s /usr/lib/x86_64-linux-gnu /usr/lib64 && \
    ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/asm && \
    ln -s /usr/include/x86_64-linux-gnu/bits /usr/include/bits && \
    ln -s /usr/include/x86_64-linux-gnu/gnu /usr/include/gnu && \
    ln -s /usr/include/x86_64-linux-gnu/sys /usr/include/sys && \
    ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h && \
    ln -s /usr/include/x86_64-linux-gnu/zconf.h /usr/include/zconf.h && \

    # Download, build and install gcc 4.7.2
    curl -sSLO ftp://ftp.mirrorservice.org/sites/sourceware.org/pub/gcc/releases/gcc-4.7.2/gcc-4.7.2.tar.gz && \

    tar zxvfp gcc-4.7.2.tar.gz && \
    rm gcc-4.7.2.tar.gz && \
    cd gcc-4.7.2 && mkdir build && cd build && \

    ../configure --disable-multilib --enable-languages=c,c++ && \
    make -j$(getconf _NPROCESSORS_ONLN) && \
    make install && \
    cd .. && cd .. && \
    rm -rf gcc-4.7.2 && \

    # We've built an older gcc than the default, so force it to use the system
    # libstdc++. There may be less drastic ways than this but this seems to work.
    rm /usr/local/lib64/libstdc++.* && \
    ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /usr/local/lib64/libstdc++.so && \

    # Download, build and install boost 1.49.0
    curl -sSLO https://sourceforge.net/projects/boost/files/boost/1.49.0/boost_1_49_0.tar.gz && \

    tar zxvfp boost_1_49_0.tar.gz && \
    rm boost_1_49_0.tar.gz && \
    cd boost_1_49_0 && \
    # see https://svn.boost.org/trac/boost/ticket/6940 and
    # http://stackoverflow.com/questions/17599377/boost-error-trouble-compiling-xtime-hpp
    sed -i 's/TIME_UTC/TIME_UTC_/g' boost/thread/xtime.hpp && \
    sed -i 's/TIME_UTC/TIME_UTC_/g' libs/thread/src/pthread/timeconv.inl && \
    ./bootstrap.sh && \
    ./b2 --prefix=/usr -j$(getconf _NPROCESSORS_ONLN) install && \
    cd .. && \

    rm -rf boost_1_49_0

#-------------------------------------------------------------------------------
# Example usage
# 
# Build the Qpid build toolchain as an image called build-qpid-cpp.
# docker build -t build-qpid-cpp:jessie -f Dockerfile.build-qpid-cpp.jessie .
# 
# Run the main shell for debugging.
# docker run --rm -it build-qpid-cpp:jessie /bin/bash
#
# Build specified version and extract.
# docker run --rm build-qpid-cpp:jessie sh -c './build.sh 0.5 1>&2; tar c qpid.tar.gz' | tar xv
# docker run --rm build-qpid-cpp:jessie sh -c './build.sh 0.32 1>&2; tar c qpid.tar.gz' | tar xv
# docker run --rm build-qpid-cpp:jessie sh -c './build.sh 1.36.0 1>&2; tar c qpid.tar.gz' | tar xv
# docker run --rm build-qpid-cpp:jessie sh -c './build.sh trunk 1>&2; tar c qpid.tar.gz' | tar xv
#
# The qpid.tar.gz archive contains qpidd.tar.gz, spout.tar.gz and drain.tar.gz
# which need to be extracted via tar xvfp qpid.tar.gz
#
# Build Docker qpidd image using the qpidd.tar.gz we've just extracted above.
# docker build -t qpidd -f Dockerfile.qpidd .
#
# Build Docker spout image using the spout.tar.gz we've just extracted above.
# docker build -t spout -f Dockerfile.spout .
#
# Build Docker drain image using the drain.tar.gz we've just extracted above.
# docker build -t drain -f Dockerfile.drain .

